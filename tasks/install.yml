---
- name: "Add system group"
  ansible.builtin.group:
    name: "{{ alertmanager_group }}"
    system: true
    state: present
  when: alertmanager_manage_user

- name: "Add system user"
  ansible.builtin.user:
    name: "{{ alertmanager_user }}"
    group: "{{ alertmanager_group }}"
    system: true
    shell: /usr/sbin/nologin
    home: "{{ alertmanager_bin_dir }}"
    createhome: false
    state: present
  when: alertmanager_manage_user

- name: "Create directories"
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: root
    group: root
    mode: u=rwx,g=rx,o=rx
  loop:
    - "{{ alertmanager_bin_dir }}"
    - "{{ alertmanager_src_dir }}"

- name: "Get GitHub release information"
  run_once: true
  delegate_to: localhost
  delegate_facts: true
  when:
    - "'github_alertmanager_release_info' not in hostvars['localhost']['ansible_facts']"
  block:
    - name: "Get GitHub release information"
      ansible.builtin.uri:
        url: >-
          {{ "https://api.github.com/repos/" + alertmanager_github_org + "/" + alertmanager_github_repo
             + "/releases"
             + ("/tags" if alertmanager_version != "latest" else "") + "/" + alertmanager_version }}
        method: GET
        return_content: true
        status_code: 200
        body_format: json
      register: _release_info

    - name: Cache GitHub release information
      ansible.builtin.set_fact:
        github_alertmanager_release_info: "{{ _release_info.json }}"
        cacheable: true

- name: Download release archive
  vars:
    _alertmanager_archive_url: >-
      {{ hostvars["localhost"]["ansible_facts"]["github_alertmanager_release_info"].assets
         | selectattr("name", "search", "alertmanager", ignorecase=true)
         | selectattr("name", "search", "linux", ignorecase=true)
         | selectattr("name", "search", alertmanager_arch_map[ansible_architecture], ignorecase=true)
         | map(attribute='browser_download_url')
         | first
         | default(None) }}
    _alertmanager_archive_filename: "{{ _alertmanager_archive_url | split('/') | last }}"
    _alertmanager_checksum_url: >-
      {{ hostvars["localhost"]["ansible_facts"]["github_alertmanager_release_info"].assets
         | selectattr("name", "equalto", alertmanager_github_checksum_filename)
         | map(attribute='browser_download_url')
         | first
         | default(None) }}
    _alertmanager_archive_checksum: >-
      {{ lookup('url', _alertmanager_checksum_url, wantlist=True)
         | select('search', _alertmanager_archive_filename)
         | first | default('') | split(' ') | first | default(None) }}
  block:
    - name: "Download archive"
      ansible.builtin.get_url:
        url: "{{ _alertmanager_archive_url }}"
        dest: "{{ alertmanager_src_dir }}/{{ _alertmanager_archive_filename }}"
        checksum: "{{ alertmanager_checksum_type }}:{{ _alertmanager_archive_checksum }}"
        owner: root
        group: root
        mode: u=rw,g=r,o=r

    - name: "Extract files from archive"
      ansible.builtin.unarchive:
        src: "{{ alertmanager_src_dir }}/{{ _alertmanager_archive_filename }}"
        remote_src: true
        dest: "{{ alertmanager_bin_dir }}"
        extra_opts:
          - "--strip-components={{ alertmanager_strip_components }}"
          - "--wildcards"
          - "--no-anchored"
          - "{{ item }}"
        owner: root
        group: root
      loop: "{{ alertmanager_src_files }}"
      notify: "restart alertmanager"

    - name: Get downloaded archive files
      ansible.builtin.find:
        paths: "{{ alertmanager_src_dir }}"
        patterns: "{{ '*' + _alertmanager_archive_filename | splitext | last }}"
      register: _alertmanager_src_archives

    - name: Remove older downloaded archive files
      ansible.builtin.file:
        path: "{{ item['path'] }}"
        state: absent
      loop: "{{ _alertmanager_src_archives['files'] }}"
      loop_control:
        label: "{{ item['path'] }}"
      when:
        - "item['path'] | basename != _alertmanager_archive_filename"
        - "alertmanager_clean_src_dir"

- name: "Create symbolic links for CLI tool binaries in /usr/local/bin"
  ansible.builtin.file:
    src: "{{ alertmanager_bin_dir }}/{{ item }}"
    dest: "/usr/local/bin/{{ item }}"
    owner: root
    group: root
    state: link
  loop: "{{ alertmanager_cli_tools }}"
